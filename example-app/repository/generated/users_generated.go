// Code generated by skimatik. DO NOT EDIT.
// Source: table users

package generated

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nhalm/pgxkit"
)

// Users represents a row from the users table
type Users struct {
	Id        uuid.UUID   `json:"id" db:"id"`
	Name      string      `json:"name" db:"name"`
	Email     string      `json:"email" db:"email"`
	Bio       pgtype.Text `json:"bio" db:"bio"`
	IsActive  bool        `json:"is_active" db:"is_active"`
	CreatedAt time.Time   `json:"created_at" db:"created_at"`
	UpdatedAt time.Time   `json:"updated_at" db:"updated_at"`
}

// GetID returns the ID of the Users for pagination
func (u Users) GetID() uuid.UUID {
	return u.Id
}

// UsersRepository provides database operations for users
type UsersRepository struct {
	db *pgxkit.DB
}

// NewUsersRepository creates a new UsersRepository
func NewUsersRepository(db *pgxkit.DB) *UsersRepository {
	return &UsersRepository{
		db: db,
	}
}

// CreateUsersParams holds parameters for creating a Users
type CreateUsersParams struct {
	Name  string      `json:"name" db:"name"`
	Email string      `json:"email" db:"email"`
	Bio   pgtype.Text `json:"bio" db:"bio"`
}

// Create creates a new Users
func (r *UsersRepository) Create(ctx context.Context, params CreateUsersParams) (*Users, error) {
	query := `
		INSERT INTO users (name, email, bio)
		VALUES ($1, $2, $3)
		RETURNING id, name, email, bio, is_active, created_at, updated_at
	`

	var u Users
	row := ExecuteQueryRow(ctx, r.db, "create", "Users", query, params.Name, params.Email, params.Bio)
	err := row.Scan(&u.Id, &u.Name, &u.Email, &u.Bio, &u.IsActive, &u.CreatedAt, &u.UpdatedAt)
	if err := HandleQueryRowError("create", "Users", err); err != nil {
		return nil, err
	}

	return &u, nil
}

// Get retrieves a Users by ID
func (r *UsersRepository) Get(ctx context.Context, id uuid.UUID) (*Users, error) {
	query := `
		SELECT id, name, email, bio, is_active, created_at, updated_at
		FROM users
		WHERE id = $1
	`

	var u Users
	row := ExecuteQueryRow(ctx, r.db, "get", "Users", query, id)
	err := row.Scan(&u.Id, &u.Name, &u.Email, &u.Bio, &u.IsActive, &u.CreatedAt, &u.UpdatedAt)
	if err := HandleQueryRowError("get", "Users", err); err != nil {
		return nil, err
	}

	return &u, nil
}

// UpdateUsersParams holds parameters for updating a Users
type UpdateUsersParams struct {
	Name      string      `json:"name" db:"name"`
	Email     string      `json:"email" db:"email"`
	Bio       pgtype.Text `json:"bio" db:"bio"`
	IsActive  bool        `json:"is_active" db:"is_active"`
	CreatedAt time.Time   `json:"created_at" db:"created_at"`
	UpdatedAt time.Time   `json:"updated_at" db:"updated_at"`
}

// Update updates an existing Users
func (r *UsersRepository) Update(ctx context.Context, id uuid.UUID, params UpdateUsersParams) (*Users, error) {
	query := `
		UPDATE users
		SET <no value>
		WHERE id = $7
		RETURNING id, name, email, bio, is_active, created_at, updated_at
	`

	var u Users
	row := ExecuteQueryRow(ctx, r.db, "update", "Users", query, params.Name, params.Email, params.Bio, params.IsActive, params.CreatedAt, params.UpdatedAt, id)
	err := row.Scan(&u.Id, &u.Name, &u.Email, &u.Bio, &u.IsActive, &u.CreatedAt, &u.UpdatedAt)
	if err := HandleQueryRowError("update", "Users", err); err != nil {
		return nil, err
	}

	return &u, nil
}

// Delete removes a Users by ID
func (r *UsersRepository) Delete(ctx context.Context, id uuid.UUID) error {
	query := `DELETE FROM users WHERE id = $1`

	rowsAffected, err := ExecuteNonQueryWithRowsAffected(ctx, r.db, "delete", "Users", query, id)
	if err != nil {
		return err
	}

	// Check if any rows were affected
	if rowsAffected == 0 {
		return fmt.Errorf("Users not found")
	}

	return nil
}

// List retrieves all Userss
func (r *UsersRepository) List(ctx context.Context) ([]Users, error) {
	query := `
		SELECT id, name, email, bio, is_active, created_at, updated_at
		FROM users
		ORDER BY id ASC
	`

	rows, err := ExecuteQuery(ctx, r.db, "list", "Users", query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var results []Users
	for rows.Next() {
		var u Users
		err := rows.Scan(&u.Id, &u.Name, &u.Email, &u.Bio, &u.IsActive, &u.CreatedAt, &u.UpdatedAt)
		if err != nil {
			return nil, HandleDatabaseError("scan", "Users", err)
		}
		results = append(results, u)
	}

	return results, HandleRowsResult("Users", rows)
}

// ListPaginated retrieves Userss with cursor-based pagination
func (r *UsersRepository) ListPaginated(ctx context.Context, params PaginationParams) (*PaginationResult[Users], error) {
	// Validate parameters
	if err := validatePaginationParams(params); err != nil {
		return nil, err
	}

	// Set default limit
	limit := params.Limit
	if limit <= 0 {
		limit = 20
	}
	if limit > 100 {
		limit = 100
	}

	// Parse cursor if provided
	var cursor *uuid.UUID
	if params.Cursor != "" {
		cursorUUID, err := decodeCursor(params.Cursor)
		if err != nil {
			return nil, fmt.Errorf("invalid cursor format: %w", err)
		}
		cursor = &cursorUUID
	}

	// Execute query with limit + 1 to check if there are more items
	query := `
		SELECT id, name, email, bio, is_active, created_at, updated_at
		FROM users
		WHERE ($1::uuid IS NULL OR id > $1)
		ORDER BY id ASC
		LIMIT $2
	`

	rows, err := ExecuteQuery(ctx, r.db, "list_paginated", "Users", query, cursor, int32(limit+1))
	if err != nil {
		return nil, fmt.Errorf("pagination query failed: %w", err)
	}
	defer rows.Close()

	var items []Users
	for rows.Next() {
		var u Users
		err := rows.Scan(&u.Id, &u.Name, &u.Email, &u.Bio, &u.IsActive, &u.CreatedAt, &u.UpdatedAt)
		if err != nil {
			return nil, err
		}
		items = append(items, u)
	}

	if err := HandleRowsResult("Users", rows); err != nil {
		return nil, err
	}

	// Check if there are more items
	hasMore := len(items) > limit
	if hasMore {
		items = items[:limit] // Remove the extra item
	}

	// Generate next cursor if there are more items
	var nextCursor string
	if hasMore && len(items) > 0 {
		lastItem := items[len(items)-1]
		nextCursor = encodeCursor(lastItem.GetID())
	}

	return &PaginationResult[Users]{
		Items:      items,
		HasMore:    hasMore,
		NextCursor: nextCursor,
	}, nil
}

// CreateWithRetry creates a new Users with retry logic
func (r *UsersRepository) CreateWithRetry(ctx context.Context, params CreateUsersParams) (*Users, error) {
	return RetryOperation(ctx, DefaultRetryConfig, "create", func(ctx context.Context) (*Users, error) {
		return r.Create(ctx, params)
	})
}

// GetWithRetry retrieves a Users by ID with retry logic
func (r *UsersRepository) GetWithRetry(ctx context.Context, id uuid.UUID) (*Users, error) {
	return RetryOperation(ctx, DefaultRetryConfig, "get", func(ctx context.Context) (*Users, error) {
		return r.Get(ctx, id)
	})
}

// UpdateWithRetry updates an existing Users with retry logic
func (r *UsersRepository) UpdateWithRetry(ctx context.Context, id uuid.UUID, params UpdateUsersParams) (*Users, error) {
	return RetryOperation(ctx, DefaultRetryConfig, "update", func(ctx context.Context) (*Users, error) {
		return r.Update(ctx, id, params)
	})
}

// ListWithRetry retrieves all Userss with retry logic
func (r *UsersRepository) ListWithRetry(ctx context.Context) ([]Users, error) {
	return RetryOperationSlice(ctx, DefaultRetryConfig, "list", func(ctx context.Context) ([]Users, error) {
		return r.List(ctx)
	})
}
