// Code generated by skimatik. DO NOT EDIT.
// Source: table posts

package generated

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nhalm/pgxkit"
)

// Posts represents a row from the posts table
type Posts struct {
	Id          uuid.UUID          `json:"id" db:"id"`
	Title       string             `json:"title" db:"title"`
	Content     string             `json:"content" db:"content"`
	AuthorId    uuid.UUID          `json:"author_id" db:"author_id"`
	IsPublished bool               `json:"is_published" db:"is_published"`
	PublishedAt pgtype.Timestamptz `json:"published_at" db:"published_at"`
	CreatedAt   time.Time          `json:"created_at" db:"created_at"`
	UpdatedAt   time.Time          `json:"updated_at" db:"updated_at"`
}

// GetID returns the ID of the Posts for pagination
func (p Posts) GetID() uuid.UUID {
	return p.Id
}

// PostsRepository provides database operations for posts
type PostsRepository struct {
	db *pgxkit.DB
}

// NewPostsRepository creates a new PostsRepository
func NewPostsRepository(db *pgxkit.DB) *PostsRepository {
	return &PostsRepository{
		db: db,
	}
}

// CreatePostsParams holds parameters for creating a Posts
type CreatePostsParams struct {
	Title       string             `json:"title" db:"title"`
	Content     string             `json:"content" db:"content"`
	AuthorId    uuid.UUID          `json:"author_id" db:"author_id"`
	PublishedAt pgtype.Timestamptz `json:"published_at" db:"published_at"`
}

// Create creates a new Posts
func (r *PostsRepository) Create(ctx context.Context, params CreatePostsParams) (*Posts, error) {
	query := `
		INSERT INTO posts (title, content, author_id, published_at)
		VALUES ($1, $2, $3, $4)
		RETURNING id, title, content, author_id, is_published, published_at, created_at, updated_at
	`

	var p Posts
	row := ExecuteQueryRow(ctx, r.db, "create", "Posts", query, params.Title, params.Content, params.AuthorId, params.PublishedAt)
	err := row.Scan(&p.Id, &p.Title, &p.Content, &p.AuthorId, &p.IsPublished, &p.PublishedAt, &p.CreatedAt, &p.UpdatedAt)
	if err := HandleQueryRowError("create", "Posts", err); err != nil {
		return nil, err
	}

	return &p, nil
}

// Get retrieves a Posts by ID
func (r *PostsRepository) Get(ctx context.Context, id uuid.UUID) (*Posts, error) {
	query := `
		SELECT id, title, content, author_id, is_published, published_at, created_at, updated_at
		FROM posts
		WHERE id = $1
	`

	var p Posts
	row := ExecuteQueryRow(ctx, r.db, "get", "Posts", query, id)
	err := row.Scan(&p.Id, &p.Title, &p.Content, &p.AuthorId, &p.IsPublished, &p.PublishedAt, &p.CreatedAt, &p.UpdatedAt)
	if err := HandleQueryRowError("get", "Posts", err); err != nil {
		return nil, err
	}

	return &p, nil
}

// UpdatePostsParams holds parameters for updating a Posts
type UpdatePostsParams struct {
	Title       string             `json:"title" db:"title"`
	Content     string             `json:"content" db:"content"`
	AuthorId    uuid.UUID          `json:"author_id" db:"author_id"`
	IsPublished bool               `json:"is_published" db:"is_published"`
	PublishedAt pgtype.Timestamptz `json:"published_at" db:"published_at"`
	CreatedAt   time.Time          `json:"created_at" db:"created_at"`
	UpdatedAt   time.Time          `json:"updated_at" db:"updated_at"`
}

// Update updates an existing Posts
func (r *PostsRepository) Update(ctx context.Context, id uuid.UUID, params UpdatePostsParams) (*Posts, error) {
	query := `
		UPDATE posts
		SET <no value>
		WHERE id = $8
		RETURNING id, title, content, author_id, is_published, published_at, created_at, updated_at
	`

	var p Posts
	row := ExecuteQueryRow(ctx, r.db, "update", "Posts", query, params.Title, params.Content, params.AuthorId, params.IsPublished, params.PublishedAt, params.CreatedAt, params.UpdatedAt, id)
	err := row.Scan(&p.Id, &p.Title, &p.Content, &p.AuthorId, &p.IsPublished, &p.PublishedAt, &p.CreatedAt, &p.UpdatedAt)
	if err := HandleQueryRowError("update", "Posts", err); err != nil {
		return nil, err
	}

	return &p, nil
}

// Delete removes a Posts by ID
func (r *PostsRepository) Delete(ctx context.Context, id uuid.UUID) error {
	query := `DELETE FROM posts WHERE id = $1`

	rowsAffected, err := ExecuteNonQueryWithRowsAffected(ctx, r.db, "delete", "Posts", query, id)
	if err != nil {
		return err
	}

	// Check if any rows were affected
	if rowsAffected == 0 {
		return fmt.Errorf("Posts not found")
	}

	return nil
}

// List retrieves all Postss
func (r *PostsRepository) List(ctx context.Context) ([]Posts, error) {
	query := `
		SELECT id, title, content, author_id, is_published, published_at, created_at, updated_at
		FROM posts
		ORDER BY id ASC
	`

	rows, err := ExecuteQuery(ctx, r.db, "list", "Posts", query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var results []Posts
	for rows.Next() {
		var p Posts
		err := rows.Scan(&p.Id, &p.Title, &p.Content, &p.AuthorId, &p.IsPublished, &p.PublishedAt, &p.CreatedAt, &p.UpdatedAt)
		if err != nil {
			return nil, HandleDatabaseError("scan", "Posts", err)
		}
		results = append(results, p)
	}

	return results, HandleRowsResult("Posts", rows)
}

// ListPaginated retrieves Postss with cursor-based pagination
func (r *PostsRepository) ListPaginated(ctx context.Context, params PaginationParams) (*PaginationResult[Posts], error) {
	// Validate parameters
	if err := validatePaginationParams(params); err != nil {
		return nil, err
	}

	// Set default limit
	limit := params.Limit
	if limit <= 0 {
		limit = 20
	}
	if limit > 100 {
		limit = 100
	}

	// Parse cursor if provided
	var cursor *uuid.UUID
	if params.Cursor != "" {
		cursorUUID, err := decodeCursor(params.Cursor)
		if err != nil {
			return nil, fmt.Errorf("invalid cursor format: %w", err)
		}
		cursor = &cursorUUID
	}

	// Execute query with limit + 1 to check if there are more items
	query := `
		SELECT id, title, content, author_id, is_published, published_at, created_at, updated_at
		FROM posts
		WHERE ($1::uuid IS NULL OR id > $1)
		ORDER BY id ASC
		LIMIT $2
	`

	rows, err := ExecuteQuery(ctx, r.db, "list_paginated", "Posts", query, cursor, int32(limit+1))
	if err != nil {
		return nil, fmt.Errorf("pagination query failed: %w", err)
	}
	defer rows.Close()

	var items []Posts
	for rows.Next() {
		var p Posts
		err := rows.Scan(&p.Id, &p.Title, &p.Content, &p.AuthorId, &p.IsPublished, &p.PublishedAt, &p.CreatedAt, &p.UpdatedAt)
		if err != nil {
			return nil, err
		}
		items = append(items, p)
	}

	if err := HandleRowsResult("Posts", rows); err != nil {
		return nil, err
	}

	// Check if there are more items
	hasMore := len(items) > limit
	if hasMore {
		items = items[:limit] // Remove the extra item
	}

	// Generate next cursor if there are more items
	var nextCursor string
	if hasMore && len(items) > 0 {
		lastItem := items[len(items)-1]
		nextCursor = encodeCursor(lastItem.GetID())
	}

	return &PaginationResult[Posts]{
		Items:      items,
		HasMore:    hasMore,
		NextCursor: nextCursor,
	}, nil
}

// CreateWithRetry creates a new Posts with retry logic
func (r *PostsRepository) CreateWithRetry(ctx context.Context, params CreatePostsParams) (*Posts, error) {
	return RetryOperation(ctx, DefaultRetryConfig, "create", func(ctx context.Context) (*Posts, error) {
		return r.Create(ctx, params)
	})
}

// GetWithRetry retrieves a Posts by ID with retry logic
func (r *PostsRepository) GetWithRetry(ctx context.Context, id uuid.UUID) (*Posts, error) {
	return RetryOperation(ctx, DefaultRetryConfig, "get", func(ctx context.Context) (*Posts, error) {
		return r.Get(ctx, id)
	})
}

// UpdateWithRetry updates an existing Posts with retry logic
func (r *PostsRepository) UpdateWithRetry(ctx context.Context, id uuid.UUID, params UpdatePostsParams) (*Posts, error) {
	return RetryOperation(ctx, DefaultRetryConfig, "update", func(ctx context.Context) (*Posts, error) {
		return r.Update(ctx, id, params)
	})
}

// ListWithRetry retrieves all Postss with retry logic
func (r *PostsRepository) ListWithRetry(ctx context.Context) ([]Posts, error) {
	return RetryOperationSlice(ctx, DefaultRetryConfig, "list", func(ctx context.Context) ([]Posts, error) {
		return r.List(ctx)
	})
}
