// Code generated by skimatik. DO NOT EDIT.
// This file provides shared database operation utilities for all repositories

package generated

// Shared database operation utilities
// These functions eliminate duplication across repositories and provide consistent patterns
// Available for both generated repositories and custom implementer extensions

import (
	"context"
	"github.com/jackc/pgx/v5"
	"github.com/nhalm/pgxkit"
)

// ExecuteQueryRow executes a single-row query and returns the row for scanning
// This eliminates duplication across Create, Get, Update, and One query operations
func ExecuteQueryRow(ctx context.Context, db *pgxkit.DB, operation, entity, query string, args ...interface{}) pgx.Row {
	return db.QueryRow(ctx, query, args...)
}

// ExecuteQuery executes a multi-row query and returns rows for scanning
// This eliminates duplication across List, Many queries, and paginated operations
func ExecuteQuery(ctx context.Context, db *pgxkit.DB, operation, entity, query string, args ...interface{}) (pgx.Rows, error) {
	rows, err := db.Query(ctx, query, args...)
	if err != nil {
		return nil, HandleDatabaseError(operation, entity, err)
	}
	return rows, nil
}

// HandleQueryRowError processes errors from single-row operations with consistent error handling
func HandleQueryRowError(operation, entity string, err error) error {
	if err != nil {
		return HandleDatabaseError(operation, entity, err)
	}
	return nil
}

// HandleRowsResult processes the final result from multi-row operations
func HandleRowsResult(entity string, rows pgx.Rows) error {
	if err := rows.Err(); err != nil {
		return HandleRowsError(entity, err)
	}
	return nil
}

// ExecuteNonQuery executes a non-query operation (INSERT, UPDATE, DELETE without RETURNING)
func ExecuteNonQuery(ctx context.Context, db *pgxkit.DB, operation, entity, query string, args ...interface{}) error {
	_, err := db.Exec(ctx, query, args...)
	if err != nil {
		return HandleDatabaseError(operation, entity, err)
	}
	return nil
}

// ExecuteNonQueryWithRowsAffected executes a non-query operation and returns rows affected
func ExecuteNonQueryWithRowsAffected(ctx context.Context, db *pgxkit.DB, operation, entity, query string, args ...interface{}) (int64, error) {
	result, err := db.Exec(ctx, query, args...)
	if err != nil {
		return 0, HandleDatabaseError(operation, entity, err)
	}
	return result.RowsAffected(), nil
}
