// Package-level error types and utilities for database operations
// This file is generated once per package and provides reusable error handling

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
)

// Error types that implementers can check and handle
var (
	ErrNotFound           = errors.New("record not found")
	ErrAlreadyExists      = errors.New("record already exists")
	ErrInvalidReference   = errors.New("invalid reference")
	ErrValidationFailed   = errors.New("validation failed")
	ErrRequiredField      = errors.New("required field missing")
	ErrTimeout            = errors.New("operation timeout")
	ErrDatabaseConnection = errors.New("database connection error")
)

// DatabaseError provides structured error information
type DatabaseError struct {
	Type      error  // One of the error types above
	Operation string // The operation that failed (e.g., "create", "get", "update")
	Entity    string // The entity name (e.g., "User", "Post")
	Detail    string // Additional details from the database
	Cause     error  // The underlying error
}

func (e *DatabaseError) Error() string {
	if e.Detail != "" {
		return fmt.Sprintf("%s during %s for %s: %s", e.Type.Error(), e.Operation, e.Entity, e.Detail)
	}
	return fmt.Sprintf("%s during %s for %s", e.Type.Error(), e.Operation, e.Entity)
}

func (e *DatabaseError) Unwrap() error {
	return e.Cause
}

// Is allows checking for specific error types using errors.Is()
func (e *DatabaseError) Is(target error) bool {
	return errors.Is(e.Type, target)
}

// HandleDatabaseError provides centralized database error handling
// This function can be used by implementers in their own code
func HandleDatabaseError(operation, entity string, err error) error {
	if err == nil {
		return nil
	}
	
	// Handle no rows found
	if errors.Is(err, pgx.ErrNoRows) {
		return &DatabaseError{
			Type:      ErrNotFound,
			Operation: operation,
			Entity:    entity,
			Cause:     err,
		}
	}
	
	// Handle constraint violations and other PostgreSQL errors
	var pgErr *pgconn.PgError
	if errors.As(err, &pgErr) {
		switch pgErr.Code {
		case "23505": // unique_violation
			return &DatabaseError{
				Type:      ErrAlreadyExists,
				Operation: operation,
				Entity:    entity,
				Detail:    pgErr.Detail,
				Cause:     err,
			}
		case "23503": // foreign_key_violation
			return &DatabaseError{
				Type:      ErrInvalidReference,
				Operation: operation,
				Entity:    entity,
				Detail:    pgErr.Detail,
				Cause:     err,
			}
		case "23514": // check_violation
			return &DatabaseError{
				Type:      ErrValidationFailed,
				Operation: operation,
				Entity:    entity,
				Detail:    pgErr.Detail,
				Cause:     err,
			}
		case "23502": // not_null_violation
			return &DatabaseError{
				Type:      ErrRequiredField,
				Operation: operation,
				Entity:    entity,
				Detail:    fmt.Sprintf("column: %s", pgErr.ColumnName),
				Cause:     err,
			}
		}
	}
	
	// Handle context timeouts
	if errors.Is(err, context.DeadlineExceeded) {
		return &DatabaseError{
			Type:      ErrTimeout,
			Operation: operation,
			Entity:    entity,
			Cause:     err,
		}
	}
	
	// Handle connection-related errors
	if isConnectionError(err) {
		return &DatabaseError{
			Type:      ErrDatabaseConnection,
			Operation: operation,
			Entity:    entity,
			Detail:    err.Error(),
			Cause:     err,
		}
	}
	
	// Generic database error - wrap the original error
	return fmt.Errorf("database error during %s for %s: %w", operation, entity, err)
}

// HandleRowsError checks for iteration errors after scanning rows
func HandleRowsError(entity string, err error) error {
	if err == nil {
		return nil
	}
	return fmt.Errorf("error iterating %s results: %w", entity, err)
}

// IsNotFound checks if an error is a "not found" error
func IsNotFound(err error) bool {
	return errors.Is(err, ErrNotFound)
}

// IsAlreadyExists checks if an error is an "already exists" error
func IsAlreadyExists(err error) bool {
	return errors.Is(err, ErrAlreadyExists)
}

// IsValidationError checks if an error is a validation error
func IsValidationError(err error) bool {
	return errors.Is(err, ErrValidationFailed) || errors.Is(err, ErrRequiredField)
}

// IsConnectionError checks if an error is a connection error
func IsConnectionError(err error) bool {
	return errors.Is(err, ErrDatabaseConnection) || isConnectionError(err)
}

// IsTimeout checks if an error is a timeout error
func IsTimeout(err error) bool {
	return errors.Is(err, ErrTimeout)
}

// isConnectionError detects connection-related errors by examining the error message
func isConnectionError(err error) bool {
	if err == nil {
		return false
	}
	
	errStr := strings.ToLower(err.Error())
	connectionKeywords := []string{
		"connection",
		"connect",
		"dial",
		"network",
		"timeout",
		"refused",
		"reset",
		"broken pipe",
		"no such host",
	}
	
	for _, keyword := range connectionKeywords {
		if strings.Contains(errStr, keyword) {
			return true
		}
	}
	
	return false
} 