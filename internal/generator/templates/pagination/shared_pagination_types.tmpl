// Code generated by dbutil-gen. DO NOT EDIT.
// Shared pagination types and utilities

package {{.PackageName}}

import (
	"encoding/base64"
	"fmt"
	"github.com/google/uuid"
)

// PaginationParams holds parameters for cursor-based pagination
type PaginationParams struct {
	// Cursor is the base64-encoded UUID to start pagination from
	// If empty, starts from the beginning
	Cursor string `json:"cursor,omitempty"`

	// Limit is the maximum number of items to return
	// Must be between 1 and 100, defaults to 20
	Limit int `json:"limit,omitempty"`
}

// PaginationResult holds the result of a paginated query
type PaginationResult[T any] struct {
	// Items is the list of items returned
	Items []T `json:"items"`

	// HasMore indicates if there are more items available
	HasMore bool `json:"has_more"`

	// NextCursor is the cursor for the next page
	// Only set if HasMore is true
	NextCursor string `json:"next_cursor,omitempty"`

	// Total is the total count of items (optional, expensive to calculate)
	Total *int `json:"total,omitempty"`
}

// HasIDInterface defines the interface for types that can be paginated
type HasIDInterface interface {
	GetID() uuid.UUID
}

// encodeCursor encodes a UUID as a base64 cursor (private function)
func encodeCursor(id uuid.UUID) string {
	return base64.URLEncoding.EncodeToString(id[:])
}

// decodeCursor decodes a base64 cursor back to a UUID (private function)
func decodeCursor(cursor string) (uuid.UUID, error) {
	if cursor == "" {
		return uuid.Nil, fmt.Errorf("empty cursor")
	}

	cursorBytes, err := base64.URLEncoding.DecodeString(cursor)
	if err != nil {
		return uuid.Nil, fmt.Errorf("invalid cursor format: %w", err)
	}

	if len(cursorBytes) != 16 {
		return uuid.Nil, fmt.Errorf("invalid cursor length: expected 16 bytes, got %d", len(cursorBytes))
	}

	var id uuid.UUID
	copy(id[:], cursorBytes)
	return id, nil
}

// validatePaginationParams validates pagination parameters (private function)
func validatePaginationParams(params PaginationParams) error {
	if params.Limit < 0 {
		return fmt.Errorf("limit cannot be negative")
	}
	if params.Limit > 100 {
		return fmt.Errorf("limit cannot exceed 100")
	}

	if params.Cursor != "" {
		_, err := decodeCursor(params.Cursor)
		if err != nil {
			return fmt.Errorf("invalid cursor: %w", err)
		}
	}

	return nil
} 