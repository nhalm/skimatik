// ListPaginated retrieves {{.StructName}}s with cursor-based pagination
func (r *{{.RepositoryName}}) ListPaginated(ctx context.Context, params PaginationParams) (*PaginationResult[{{.StructName}}], error) {
	// Validate parameters
	if err := validatePaginationParams(params); err != nil {
		return nil, err
	}

	// Set default limit
	limit := params.Limit
	if limit <= 0 {
		limit = 20
	}
	if limit > 100 {
		limit = 100
	}

	// Parse cursor if provided
	var cursor *uuid.UUID
	if params.Cursor != "" {
		cursorUUID, err := decodeCursor(params.Cursor)
		if err != nil {
			return nil, fmt.Errorf("invalid cursor format: %w", err)
		}
		cursor = &cursorUUID
	}

	// Execute query with limit + 1 to check if there are more items
	query := `
		SELECT {{.SelectColumns}}
		FROM {{.TableName}}
		WHERE ($1::uuid IS NULL OR {{.IDColumn}} > $1)
		ORDER BY {{.IDColumn}} ASC
		LIMIT $2
	`
	
	rows, err := r.conn.Query(ctx, query, cursor, int32(limit+1))
	if err != nil {
		return nil, fmt.Errorf("pagination query failed: %w", err)
	}
	defer rows.Close()
	
	var items []{{.StructName}}
	for rows.Next() {
		var {{.ReceiverName}} {{.StructName}}
		err := rows.Scan({{.ScanArgs}})
		if err != nil {
			return nil, err
		}
		items = append(items, {{.ReceiverName}})
	}
	
	if err := rows.Err(); err != nil {
		return nil, err
	}

	// Check if there are more items
	hasMore := len(items) > limit
	if hasMore {
		items = items[:limit] // Remove the extra item
	}

	// Generate next cursor if there are more items
	var nextCursor string
	if hasMore && len(items) > 0 {
		lastItem := items[len(items)-1]
		nextCursor = encodeCursor(lastItem.GetID())
	}

	return &PaginationResult[{{.StructName}}]{
		Items:      items,
		HasMore:    hasMore,
		NextCursor: nextCursor,
	}, nil
} 