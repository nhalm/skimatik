// {{.FunctionName}} executes the {{.QueryName}} query with pagination
func (r *{{.RepositoryName}}) {{.FunctionName}}(ctx context.Context{{.ParameterDeclarations}}, cursor string, limit int) (*PaginatedResult[{{.ResultType}}], error) {
	// Parse cursor
	var afterID uuid.UUID
	if cursor != "" {
		decoded, err := base64.URLEncoding.DecodeString(cursor)
		if err != nil {
			return nil, fmt.Errorf("invalid cursor: %w", err)
		}
		afterID, err = uuid.Parse(string(decoded))
		if err != nil {
			return nil, fmt.Errorf("invalid cursor format: %w", err)
		}
	}

	// Build query with pagination
	baseQuery := `{{.SQL}}`
	var query string
	var args []interface{}
	
	// Add parameters first
	{{if .ParameterArgs}}
	args = append(args, {{.ParameterArgs}})
	{{end}}
	
	if cursor != "" {
		query = fmt.Sprintf("%s AND {{.IDColumn}} > $%d ORDER BY {{.IDColumn}} ASC LIMIT $%d", 
			baseQuery, len(args)+1, len(args)+2)
		args = append(args, afterID, limit+1) // +1 to check if there are more results
	} else {
		query = fmt.Sprintf("%s ORDER BY {{.IDColumn}} ASC LIMIT $%d", 
			baseQuery, len(args)+1)
		args = append(args, limit+1) // +1 to check if there are more results
	}

	rows, err := r.db.Query(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var results []{{.ResultType}}
	for rows.Next() {
		var result {{.ResultType}}
		err := rows.Scan({{.ScanArgs}})
		if err != nil {
			return nil, err
		}
		results = append(results, result)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}

	// Check if there are more results
	hasMore := len(results) > limit
	if hasMore {
		results = results[:limit] // Remove the extra result
	}

	// Generate next cursor
	var nextCursor string
	if hasMore && len(results) > 0 {
		lastID := results[len(results)-1].GetID()
		nextCursor = base64.URLEncoding.EncodeToString([]byte(lastID.String()))
	}

	return &PaginatedResult[{{.ResultType}}]{
		Items:      results,
		NextCursor: nextCursor,
		HasMore:    hasMore,
	}, nil
} 