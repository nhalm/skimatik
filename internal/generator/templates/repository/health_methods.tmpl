// HealthCheck performs a basic health check for the {{.StructName}} repository
func (r *{{.RepositoryName}}) HealthCheck(ctx context.Context) error {
	// Check basic database connectivity using pgxkit's HealthCheck
	if err := r.db.HealthCheck(ctx); err != nil {
		return fmt.Errorf("database connection failed for {{.StructName}}: %w", err)
	}

	// Check if table is accessible with a simple count query
	query := `SELECT COUNT(*) FROM {{.TableName}} LIMIT 1`
	var count int64
	err := r.db.QueryRow(ctx, query).Scan(&count)
	if err != nil {
		return fmt.Errorf("table {{.TableName}} is not accessible: %w", err)
	}

	return nil
}

// HealthCheckDetailed performs a comprehensive health check for the {{.StructName}} repository
func (r *{{.RepositoryName}}) HealthCheckDetailed(ctx context.Context) (*{{.StructName}}HealthStatus, error) {
	status := &{{.StructName}}HealthStatus{
		TableName:     "{{.TableName}}",
		Repository:    "{{.RepositoryName}}",
		CheckTime:     time.Now(),
		Healthy:       true,
		Checks:        make(map[string]string),
	}

	// Test database connection using pgxkit's HealthCheck
	if err := r.db.HealthCheck(ctx); err != nil {
		status.Healthy = false
		status.Checks["connection"] = fmt.Sprintf("FAILED: %v", err)
		status.Error = err.Error()
		return status, err
	}
	status.Checks["connection"] = "OK"

	// Test table accessibility
	countQuery := `SELECT COUNT(*) FROM {{.TableName}}`
	var totalRecords int64
	if err := r.db.QueryRow(ctx, countQuery).Scan(&totalRecords); err != nil {
		status.Healthy = false
		status.Checks["table_access"] = fmt.Sprintf("FAILED: %v", err)
		status.Error = err.Error()
		return status, err
	}
	status.Checks["table_access"] = "OK"
	status.TotalRecords = totalRecords

	// Test table structure by attempting to select from all expected columns
	structQuery := `SELECT {{.SelectColumns}} FROM {{.TableName}} LIMIT 1`
	rows, err := r.db.Query(ctx, structQuery)
	if err != nil {
		status.Healthy = false
		status.Checks["table_structure"] = fmt.Sprintf("FAILED: %v", err)
		status.Error = err.Error()
		return status, err
	}
	rows.Close()
	status.Checks["table_structure"] = "OK"

	// Test write permissions (if applicable) with a transaction that gets rolled back
	tx, err := r.db.BeginTx(ctx, pgx.TxOptions{})
	if err != nil {
		status.Checks["write_permissions"] = fmt.Sprintf("FAILED: cannot begin transaction: %v", err)
	} else {
		// Try to perform a read-only operation in the transaction
		var exists bool
		checkQuery := `SELECT EXISTS(SELECT 1 FROM {{.TableName}} LIMIT 1)`
		if err := tx.QueryRow(ctx, checkQuery).Scan(&exists); err != nil {
			status.Checks["write_permissions"] = fmt.Sprintf("FAILED: %v", err)
		} else {
			status.Checks["write_permissions"] = "OK"
		}
		// Always rollback the test transaction
		tx.Rollback(ctx)
	}

	// Measure response time for database health check
	start := time.Now()
	if err := r.db.HealthCheck(ctx); err != nil {
		status.Checks["response_time"] = fmt.Sprintf("FAILED: %v", err)
	} else {
		duration := time.Since(start)
		status.ResponseTime = duration
		status.Checks["response_time"] = fmt.Sprintf("OK (%v)", duration)
	}

	return status, nil
}

// {{.StructName}}HealthStatus represents the health status of the {{.StructName}} repository
type {{.StructName}}HealthStatus struct {
	TableName     string            `json:"table_name"`
	Repository    string            `json:"repository"`
	CheckTime     time.Time         `json:"check_time"`
	Healthy       bool              `json:"healthy"`
	Error         string            `json:"error,omitempty"`
	TotalRecords  int64             `json:"total_records"`
	ResponseTime  time.Duration     `json:"response_time"`
	Checks        map[string]string `json:"checks"`
} 